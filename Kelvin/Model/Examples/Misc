# Create a list {f(3,4), f(3,4), f(3,4), f(3,4), f(3,4)}, then store the list in variable "c"
c:=repeat(f(3,4),5)

# Define f(a,b) = random(a, b) ^ 2
f(a,b):=random(a,b)^2

# Evaluate c, which generate a list of random numbers according to the definition of f.
println(eval c)

# Delete variable c.
del c

# Evaluate c again. You can see now that it no longer has any value.
eval c

# Define a function that generates a 2D matrix consisting of random 0 and 1s of a dimension
def matrix(a) = (round(random())...a...a)

# Set x equal to a list of 5 random integers from 1 to 5
x:=round(random(1,5)) repeat 5
println x

# Set x to the sum of all elements in x
x:=sum(x)
println x

# Store a x by x random matrix into variable m
m:=matrix(x)
del x

# Print the matrix as the second output
println m

# Or, you can do something crazy like this, all on a single line!
def f() = ({1, 2, 3, x} | $ ^ 2 -> define(f(x), sum($)); f(12) -> $...5 | $ % 7 -> (sum($)!)° -> define(a, $ % 12345 / 3 * e); cos(log(a) ^ 2) * √((5!)!) * 360°)
println(f())
del a

# Here comes the feature that makes Kelvin different - algebraic computations!
# Try the following expressions:
println 1+(a-1-(b-3))+4
println a || b && true and false || true || d || false
println x*x^x/x
println a+b+d+c+v-b-(d-c+a)-a-v
println a^x*-a^3
println 3a*4a
println 3a+4a
println (3a)^2
println a^2+b+2a^2-b+c-3a^2
println 33+43-23*(5+47)^2/2+cos(12)^log(4)%0.1
println 3!!°/4/pi

# Store a string "Hello World" into variable 'greeting'
def greeting = "Hello World"
println greeting

# Runtime compilation!
eval(compile "println \"Hello World from runtime compilation!\"")

# Factorization
x:=factor(a*b+a*c+2a*f+d*a)
println x
del x

# List operations
println {1, 3, 4} + {log(x), 2, 5 ^ 2}
println {1, 2} + {3}

def l1 = {2, 3, 7, x, log(a), g(x)}
def f(x) = x^3 + 3x + 4
println f(l1)
