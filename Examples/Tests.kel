# Comprehensive test
# true = PASS
# false = FAIL

(c := f(3,4)...3; c) === {f(3, 4), f(3, 4), f(3, 4)}
(a...2...3) === {{a, a}, {a, a}, {a, a}}
del c

def f() = ({1, 2, 3, x} | $0 ^ 2 -> define(f(x), sum($0)); f(12) -> $0...5 | $0 % 7 -> (sum($0)!)° -> define(a, $0 % 12345 / 3 * e); cos(log(a) ^ 2) * √((5!)!) * 360°)
# f() === 3.8082405532548922906*10^99
del f
del a

((1 + (a - 1 - (b - 3)) + 4) === (-1 * b + a + 7))

def bool = ((round random()...5...5)[4][3] -> $0 == 1 || $0 == 0)
bool === true

({1, 2, 3} | $0 > 1 ? (true : false)) === {false, true, true}
(true && false && b || true || false || d || a) === (true || false && b || d || a)
x ^ x * x / x === x ^ x
v + d + c + b + a - b - (d - c + a) - a - v === c * 2 + a * -1
a ^ x * (0 - a) ^ 3 === a ^ (x + 3) * -1
a * a * 4 * 3 === a ^ 2 * 12
a * 4 + a * 3 === a * 7
(a * 3) ^ 2 === a ^ 2 * 9
c + (b + a ^ 2 * 2 + a ^ 2 - b) - a ^ 2 * 3 === c
round(cos(12) ^ log(4) % 0.1 + (43 + 33 - 23 * (5 + 47) ^ 2 / 2), 1) === -31020
((3!)!)° / 4 / \pi === 1
1 + 4 + a - 1 - (b - 3) === a + 7 - b
(a || b && true and false || true || d || false) === true
x * x ^ x / x === x ^ x
a + b + c + d + v - b - (a + d - c) - a - v === 2c - a
a ^ x * -a ^ 3 === -(a ^ (x + 3))
3a * 4a === 12a ^ 2
3a + 4a === 7a
(3a) ^ 2 === 9a ^ 2
2 * a ^ 2 + a ^ 2 + b - b + c - 3 * a ^ 2 === c
(3!)!° / 4 / \pi === 1

x:=factor(f * a * 2 + d * a + c * a + b * a)
x === (f * 2 + d + c + b) * a
del x

{log(x), 2, 5 ^ 2} + {1, 3, 4} === {log(x) + 1, 5, 29}

def l1 = {2, 3, 7, x, log(a), g(x)}
def f(x) = x ^ 3 + x * 3 + 4
f(l1) === {8, 27, 343, x ^ 3, log(a) ^ 3, g(x) ^ 3} + {6, 9, 21, x * 3, log(a) * 3, g(x) * 3} + 4
del f
del l1

({1, 2, 3, 4, 5, 6} | (9 ncr $0)) === {9, 36, 84, 126, 126, 84}
tan(x) * sec(x) * csc(x) * cos(x) ^ 2 === 1
(2 * x * a) ^ 2 === 4 * (x * a) ^ 2
(2 ^ x) ^ 3 === 8 ^ x
(x ^ 2) ^ 3 === x ^ 6

def x = 100
x += √x
x === 110

def a = 0
a++
(a += x) === 111
# (a := a % 11) === 1
!(!true || false) === true
(a xor b) === (b && !a || a && !b)
(sum5n({1, 3, 7, 9, 11, 12, 17}) | $0::1) === {1, 3, 9, 12, 17}
del a
del b

def l1 = {1, 1, 2, 2, 3, 3, 3, 4, 2, 6, 9, 49, 107}
count(l1) === 13

# Test implied multiplicity
f1(x) === f1(x)
(a)(b)(c-d) === a*b*(c-d)
f(b)x === f(b)*x
3x3(a) === 3*x3(a)

# Test replace
del x
((x ^ 3)'x << x = 3) === 27

# Test matrix
[[1, 3], [1, 2]][1][1] === 2
({[1]} | $0 as @list) === {{1}}

def mat = [[12, 7, 1], [3, 3, z], [i, 2, 1]]
r1 := random()
r2 := random()
det1 := (det(mat) << z = r1 << i = r2)
det2 := (detCof(mat) << z = r1 << i = r2)
diff := round(det1 - det2, 10)
println "DIFF = " & diff
diff === 0

[[1, 2], [2, 3], [3, 4]] ** [[1, 2, 3], [2, 3, 4]] === [[5, 8, 11], [8, 13, 18], [11, 18, 25]]
[[1, 2, 3], [2, 3, 4]] ** [[1, 2], [2, 3], [3, 4]] === [[14, 20], [20, 29]]
mat === mat ** idMat(count(mat))

# Test matrix transposition
¡(mat({1,2,3},1,3)) === [[1], [2], [3]]

# Test normCdf
normCdf(-inf, 7, 45, 21) === 0.035184776966467601333
normCdf(-1, 1) === 0.6826894808737367093
normCdf(0) === 0.500000000524808641

# Test map, reduce, oneVar, repeat, subscript, and closure arguments
round((oneVar(0...1000 | 1 + $1) | $0::1 ~ $1 + $0), 5) === 417671830.49443

# Test list operations
def l1 = {1, 2, 3, 4, 5}

# Concatenation
def l2 = (l1 ++ {6, 7, 8, 9, 10})

# Map
def l3 = (l2 | $0 + $1)

# Filter
def l4 = (l1 |? $0 % 2 == 0)

# Sort
def l5 = (l1 >? $0 > $1)

# Reduce
n := (l2 ~ $0 + $1 ^ 2)

# Remove
l1 := (l1 rm 3)

# Subscript by range
l6 := l1[1, 2]

l1 === {1, 2, 3, 5}
l2 === {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
l3 === {1, 3, 5, 7, 9, 11, 13, 15, 17, 19}
l4 === {2, 4}
l5 === {5, 4, 3, 2, 1}
n === 385
l6 === {2}

# Test string concatenation
"asdf" & "sdfsdf"[1] === "asdfd"

println "Test completed. No errors identified. System operational."

# Test binomCdf
sum(binomPdf(10, 0.1)) === 0.99999999999999999973

# Test inout variables
def f(x) = (return x++)
def a = 3
f(&a)
a === 4
