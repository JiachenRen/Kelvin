# Define f as a function of x, y, z
def f(x, y, z) = x(x, y, z) + y(x, y, z) + z(x, y, z)

# define x, y, z as functions of u, s, t
def x(u, s, t) = u^2 + s * cos(t)
def y(u, s, t) = t^s + ln(u) / atan(s)
def z(u, s, t) = u + s / t ^ abs(u)

# Partial differentiation
def df_du = der(f(u, s, t), u)
def df_ds = der(f(u, s, t), s)
def df_dt = der(f(u, s, t), t)

println "∂f/∂u = " & df_du
println "∂f/∂s = " & df_ds
println "∂f/∂t = " & df_dt

def g(x) = x^3 + ln(cos(x))*sin(x)

# Shorthand for first derivative
println g(x ^ 2)'x

println der(x ^ 2 + f(x) * x, x)

# Preliminary implicit differentiation
println "\nImplicit differentiation: "
println impDif(y ^ 2 + y * x ^ 2 = y ^ 3 + y * x * b + y * x * a, x, y)

# Gradient of a function
println "\nGradient: "
def f(x, y, z) = z + x ^ 2 + x * 3 + log(y) ^ 2 * 4
println grad(f(x, y, z), [x, y, z])

def f(x, y, z) = y * 2 + x ^ 2 - z * 4
println f(x, y, z) grad [x, y, z]

# Directional differentiation
println "\nDirectional differentiation:"
println dirDif(f(x, y, z), [x, y, z], [a, b, c])

# Gradient at specific point
def f(x, y, z) = z ^ 2 + 2y * x + x ^ 3
def g = (f(x, y, z) grad [x, y, z] << x = 3 << y = 2 << z = 1)
g === [31, 6, 2]

# Another way to use point specific evaluation
def f(x,y) = x^2 + x*y^2
(f(x, y)'x << {x = 3, y = 4}) === 22
(f(x, y)'y << {x = 3, y = 4}) === 24
(f(y, x)'x << {x = 3, y = 4}) === 24
(f(x, y)'x << {x = 3, y = 4}) === 22


def f(x, y, z) = 2x * y + 3x + 2y + x^2 + z^3
def g1 = (f(x, y, z) grad [x, y, z] << {x = 2, y = 2, z = 6})
g1 === [11, 6, 108]

def g2 = (f(x, y, z) grad [x, y, z] << {x = a, y = b, z = c})
g2 === [2 * a + 2 * b + 3, 2 + 2 * a, 3 * c ^ 2]

# Finding the tangent line/plane/surface/hyper-blablabla in higher dimensions
def f(x,y,z) = x ^ 2 + 2 * x * y + z ^ 3
def p = [1, 2, 3]
def t = tangent(f(x, y, z), [x, y, z], p)

print "Equation of tangent plane for function " & f(x, y, z)
print " at point " & p & " is "
println t & "\n"

def g(x, y) = x ^ 2 + y ^ 3
def points = [[1, 2], [2, 3], [4, 9], [a, b]]
for (point: points) {
    print "Tangenet line for " & g(x, y) & " at " & point & " is ";
    println tangent(g(x,y), [x, y], point)
}
