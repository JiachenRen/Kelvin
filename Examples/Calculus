# Define f as a function of x, y, z
def f(x, y, z) = x(x, y, z) + y(x, y, z) + z(x, y, z)

# define x, y, z as functions of u, s, t
def x(u, s, t) = u^2 + s * cos(t)
def y(u, s, t) = t^s + ln(u) / atan(s)
def z(u, s, t) = u + s / t ^ abs(u)

# Partial differentiation
def df_du = derivative(f(u, s, t), u)
def df_ds = derivative(f(u, s, t), s)
def df_dt = derivative(f(u, s, t), t)

println "df/du = " & df_du
println "df/ds = " & df_ds
println "df/dt = " & df_dt

def g(x) = x^3 + ln(cos(x))*sin(x)

# Shorthand for first derivative
println g(x ^ 2)'x

println derivative(x ^ 2 + f(x) * x, x)

# Preliminary implicit differentiation
println "\nImplicit differentiation: "
println impDif(y ^ 2 + y * x ^ 2 = y ^ 3 + y * x * b + y * x * a, x, y)

# Gradient of a function
println "\nGradient: "
def f(x, y, z) = z + x ^ 2 + x * 3 + log(y) ^ 2 * 4
println grad(f(x, y, z), {x, y, z})

def f(x, y, z) = y * 2 + x ^ 2 - z * 4
println f(x, y, z) grad {x, y, z}

# Directional differentiation
println "\nDirectional differentiation:"
println dirDif(f(x, y, z), [a, b, c], {x, y, z})
