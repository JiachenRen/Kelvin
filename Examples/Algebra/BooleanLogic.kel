# Test boolean logic simplification

# Test for base cases
# a and a is a
(a && a) === a
(a && b && a) === (a && b)
# a or a is a
(a || a) === a
(a || b || a) === (a || b)
# not not a is a
!(!a) === a
(a && !(!a)) === a
# a or false is a
(a || false || b) === (a || b)
(a || b || false) === (false || b || a)
(a || b || false) === (a || b)
# a or true is true
(a || true) === true
# a and ... and false is false
(a && b && false) === false
(false && a && b) === false
(b && false && a) === false
# a and true is a
(a && b && true) === (a && b)
# a and not a is false
(a && b && !(!(!a))) === false
# a or not a is true
(a || b || !a) === true
# a and (b or a) is a
(a && (b || a)) === a
((a || b) && b) === b
assert (a && (b || (b && a))) != a
# a or (a and b) is a
(f() && g() || f()) === f()

# Test for complex cases (where expanding & factoring are needed)
((!a || b) && (a || b)) === b
(!a && (a || b)) === (!a && b)
((a && b) || (a && c)) === (a && (b || c))
((a || b) && (a || c || d)) === (a || b && (c || d))

def f1(a, b, c, d) {
    return ((a || b) && (a || c || d))
}

def f2(a, b, c, d) {
    return a || b && (c || d)
}

def randBool() {
    return int(random() * 2) == 0
}

def randBool(i) {
    return randBool()...i
}

def test(f, g, i) {
    tmp := randBool(4);
    return ((f <<< tmp) == (g <<< tmp))...i
}

test(f1, f2, 10) === (true...10)
(a or (b and (c or a))) === (a || b && c)
(a or (b and (c or !a))) === (a || b)

# The ultimate test, from CS 2051 HW
!(!(!x && !(!y || x)) || !y) === (!x && y)
(not (not (not x and not (not y or x)) or not y)) === (not x and y)
