# a 2 x 2 matrix
def m2x2 = [[1, 3], [1, 2]]
println m2x2

# Get the element in the second column, second row
println m2x2[1][1]

# 3 dimensional matrix of 3 x 3 x 2
def m3x3x2 = [[[1, 4], [2, 7], [3, 4]], [[1, 4], [2, 7], [3, 4]], [[1, 4], [2, 7], [3, 4]]]

# get the highlighted element (prints 3)
println m3x3x2[1][2][0]

# Get the determinant of matrix
println (det [[a, b, c], [x, y, z], [i, q, k]])
println (det [[5, 8, 11], [8, 13, 18], [11, 18, 25]])

# Matrix generation
# Generate a 3 x 3 matrix
println mat(3)

# Generate a 4 x 5 matrix
println mat(4, 5)

# Creating a random 3 x 3 matrix (The syntax is WILD!)
def r_mat = (mat(3) | ($0 | random()))
println r_mat

# Matrix multiplication
println [[1, 2], [2, 3], [3, 4]] ** [[1, 2, 3], [2, 3, 4]] == [[5, 8, 11], [8, 13, 18], [11, 18, 25]]
println [[1, 2, 3], [2, 3, 4]] ** [[1, 2], [2, 3], [3, 4]] == [[14, 20], [20, 29]]

# A * Ia = Ia * A = A
def m1 = [[5, 8, 11], [8, 13, 18], [11, 18, 25]] ** idMat(3)
println m1

# Identity matrix
println idMat(3)

# Transpose matrix
println trans(m1)
println ยก({{1}, [2], {3}} !! @matrix) == [[1], [2], [3]]

# Transformation
# $0 -> element
# $1 -> row
# $2 -> column
assert transform(idMat(5)) {
    $0 + $1 - $2
} == [
    [1, -1, -2, -3, -4],
    [1,  1, -1, -2, -3],
    [2,  1,  1, -1, -2],
    [3,  2,  1,  1, -1],
    [4,  3,  2,  1,  1]
]

# Find the cofactor matrix
printMat cofactor([
    [1, -1, -2, -3, -4],
    [1,  1, -1, -2, -3],
    [2,  1,  1, -1, -2],
    [3,  2,  1,  1, -1],
    [4,  3,  2,  1,  1]
])

# Cofactor determinant vs REF determinant
def test(n) {
    m := (random()...n...n) as @matrix;
    println "testing " & m;
    ref := (det m);
    cof := detCof(m);
    println "det REF = " & ref;
    println "det COF = " & cof;
    println "DIFF    = " & (ref - cof);
    round(det m, 10) === round(detCof(m), 10)
}


map(0...5) {test($1 + 1)}

# Finding row reduced echelon form (RREF) and REF
# Find the REF form
ref(idMat(3)) === idMat(3)
ref(mat(flatten({random()...3, -4, random()...3, -11, random()...3, 22}),3,4))

# Find the RREF form
# There's a statistically insignificant chance that 3 random vectors are linearly dependent.
rref randMat(3) === idMat(3)

# QR Factorization of matrix
set "rounding" to "exact"
factorizeQR(mat({1, 0, 1, 0, 1, 1, 1, 1}, 4)) as @string === "[[1/2, -1/2], [1/2, -1/2], [1/2, 1/2], [1/2, 1/2]] ** [[2, 1], [0, 1]]"
set "rounding" to "approximate"

# Find distinct rational eigen values
rEigenVals(mat({2, 4, 3, -4, -6, -3, 3, 3, 1})) === {1, -2}

# Find the least squares solution to Ax = b
leastSq(mat({1, -6, 1, -2, 1, 1, 1, 7}, 4), [-1, 2, 1, 6]) == [2, 0.5]
