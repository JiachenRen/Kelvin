# Comprehensive test
# true = PASS
# false = FAIL

assert (c := f(3,4)...3; c) == {f(3, 4), f(3, 4), f(3, 4)}
assert (a...2...3) == {{a, a}, {a, a}, {a, a}}
del c

def f() = ({1, 2, 3, x} | $0 ^ 2 -> define(f(x), sum($0)); f(12) -> $0...5 | $0 % 7 -> (sum($0)!)° -> define(a, $0 % 12345 / 3 * e); cos(log(a) ^ 2) * √((5!)!) * 360°)
assert f() == 3.846913688192367*10^99
del f
del a

assert ((1 + (a - 1 - (b - 3)) + 4) == (-1 * b + a + 7))

def bool = ((round random()...5...5)[4][3] -> $0 == 1 || $0 == 0)
assert bool == true

assert ({1, 2, 3} | $0 > 1 ? (true : false)) == {false, true, true}
assert (true && false && b || true || false || d || a) == (true || false && b || d || a)
assert x ^ x * x / x == x ^ x
assert v + d + c + b + a - b - (d - c + a) - a - v == c * 2 + a * -1
assert a ^ x * (0 - a) ^ 3 == a ^ (x + 3) * -1
assert a * a * 4 * 3 == a ^ 2 * 12
assert a * 4 + a * 3 == a * 7
assert (a * 3) ^ 2 == a ^ 2 * 9
assert c + (b + a ^ 2 * 2 + a ^ 2 - b) - a ^ 2 * 3 == c
# assert cos(12) ^ log(4) % 0.1 + (43 + 33 - 23 * (5 + 47) ^ 2 / 2) == -31019.997164792938
assert ((3!)!)° / 4 / pi == 1

x:=factor(f * a * 2 + d * a + c * a + b * a)
assert x == (f * 2 + d + c + b) * a
del x

assert {log(x), 2, 5 ^ 2} + {1, 3, 4} == {log(x) + 1, 5, 29}

def l1 = {2, 3, 7, x, log(a), g(x)}
def f(x) = x ^ 3 + x * 3 + 4
assert f(l1) == {8, 27, 343, x ^ 3, log(a) ^ 3, g(x) ^ 3} + {6, 9, 21, x * 3, log(a) * 3, g(x) * 3} + 4
del f
del l1

assert ({1, 2, 3, 4, 5, 6} | (9 ncr $0)) == {9, 36, 84, 126, 126, 84}
assert tan(x) * sec(x) * csc(x) * cos(x) ^ 2 == 1
assert (2 * x * a) ^ 2 == 4 * (x * a) ^ 2
assert (2 ^ x) ^ 3 == 8 ^ x
assert (x ^ 2) ^ 3 == x ^ 6

def x = 100
x += √x
assert x == 110

def a = 0
a++
assert (a += x) == 111
# assert (a := a % 11) == 1
assert !(!true || false) == true
assert (a xor b) == (b && !a || a && !b)
assert (sum5n({1, 3, 7, 9, 11, 12, 17}) | $0::1) == {1, 3, 9, 12, 17}
del a
del b

def l1 = {1, 1, 2, 2, 3, 3, 3, 4, 2, 6, 9, 49, 107}
assert size(l1) == 13

# Test implied multiplicity
assert f1(x) == f1(x)
assert (a)(b)(c-d) == a*b*(c-d)
assert f(b)x == f(b)*x
assert 3x3(a) == 3*x3(a)

# Test replace
del x
assert ((x ^ 3)'x << x = 3) == 27

# Test matrix
assert [[1, 3], [1, 2]][1][1] == 2
assert ({[1]} | $0 as list) == {{1}}

def mat = [[a, b, c], [x, y, z], [i, q, k]]
assert det mat == (z * q * -1 + y * k) * a + (z * i * -1 + x * k) * b * -1 + (y * i * -1 + x * q) * c

assert [[1, 2], [2, 3], [3, 4]] ** [[1, 2, 3], [2, 3, 4]] == [[5, 8, 11], [8, 13, 18], [11, 18, 25]]
assert [[1, 2, 3], [2, 3, 4]] ** [[1, 2], [2, 3], [3, 4]] == [[14, 20], [20, 29]]
assert mat == mat ** idMat(size(mat))

# Test matrix transposition
assert ¡([1, 2, 3] !! matrix) == [[1], [2], [3]]

# Test normCdf
assert normCdf(-inf, 7, 45, 21) == 0.0351847769664676
assert normCdf(-1, 1) == 0.6826894808737367
assert normCdf(0) == 0.5000000005248086

# Test map, reduce, oneVar, repeat, subscript, and closure arguments
assert (oneVar(0...1000 | 1 + $1) | $0::1 ~ $1 + $0) == 417671830.9944263

# Test list operations
def l1 = {1, 2, 3, 4, 5}

# Concatenation
def l2 = (l1 ++ {6, 7, 8, 9, 10})

# Map
def l3 = (l2 | $0 + $1)

# Filter
def l4 = (l1 |? $0 % 2 == 0)

# Sort
def l5 = (l1 >? $0 > $1)

# Reduce
n := (l2 ~ $0 + $1 ^ 2)

# Remove
l1 := (l1 rm 3)

# Subscript by range
l6 := l1[1, 2]

assert l1 == {1, 2, 3, 5}
assert l2 == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
assert l3 == {1, 3, 5, 7, 9, 11, 13, 15, 17, 19}
assert l4 == {2, 4}
assert l5 == {5, 4, 3, 2, 1}
assert n == 385
assert l6 == {2}

# Test string concatenation
assert "asdf" & "sdfsdf"[1] == "asdfd"

# Test Multiline function definition
def bin_search(arr, search) {
    c := 0;
    first := 0;
    n := size(arr);
    last := n - 1;
    middle := int((first + last) / 2);

    while (first <= last) {
        b := false;

        if (arr[middle] < search) {
            first := middle + 1;
            b := true;
        }

        if (arr[middle] == search) {
            return middle;
        }

        if (!b) {
            last := middle - 1;
        }

        middle := int((first + last) / 2);
    }

    return "not found";
}

def l1 = {1, 2, 3, 5, 7, 8, 9, 10}
assert bin_search(l1, 8.5) == "not found"
assert bin_search(l1, 9) == 6

println "Test completed. No errors identified. System operational."
